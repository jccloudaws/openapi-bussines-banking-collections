openapi: 3.0.0
info:
  title: Users experience API
  description: |
    Channel API for Users experience  <br>
    <br>
    <b>• Business Area</b>  `Sales and Service`
    <br>
    <b>• Business Domain</b>  `Cross Channel`
    <br>
    <b>• Service Domain:</b>  `Party Authentication`
  contact:
    name: Rossmel Mendoza
    email: rmendoza-ext@pichincha.pe
  version: 1.1.1
servers:
  - url: http://localhost:8080/v1/business-banking/cxp/users
    description: Development
security:
  - ApiKeyAuth: []
paths:
  /logout:
    post:
      tags:
        - End session of user
      operationId: LogoutUserSession
      responses:
        "200":
          description: User logout successful.
        "204":
          description: The key does not exist in cache.
        "400":
          description: Bad request (005, 006, 007)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (003, 004)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Resource not found (001, 002)
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal com.pichincha.business.banking.services.error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

  /:
    get:
      tags:
        - Get user
      operationId: GetUser
      description: Endpoint for search and user by objectID from B2C
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
          description: List of users
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Bad request (CXP001)"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Internal error (CXP002, CXP003)"

  /verify:
    post:
      tags:
        - b2c
      operationId: VerifyInformation
      description: Endpoint for put in cache information, when an user make login in B2C
      parameters:
        - in: header
          name: x-api-key
          required: true
          schema:
            type: string
          description: API Key of APIM
          example: 'ywtjasda123123asdas'
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/VerifyUserRequest'

        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyUserResponse'
          description: User claims to B2C
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Not Found"
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Bad request"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Internal error"

  /verify/user:
    get:
      tags:
        - Verify user
      summary: Call to business users API to verify email
      description: Verify user.
      operationId: VerifyUser
      parameters:
        - in: query
          name: documentNumber
          schema:
            type: string
          description: User document number
          example: 1717589012
          required: true
        - in: query
          name: documentType
          schema:
            type: string
          description: User document number type
          example: 0001
          required: true
        - in: query
          name: email
          schema:
            type: string
          description: User email
          example: 0001
          required: true

      responses:
        "200":
          description: "Email does not exist"
        "400":
          description: "Bad request (CXP001)"
        "409":
          description: "Email already exist"
        "500":
          description: "Internal error (CXP002, CXP003)"
      x-accepts: application/json
      x-tags:
        - tag: default

  /profile:
    get:
      tags:
        - Get Profile
      operationId: Getprofile
      description: Endpoint return user profile after make login
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
          description: Profile information
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Bad request (CXP001)"
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: "Internal error (CXP002, CXP003)"

components:
  schemas:
    UserResponse:
      title: UserResponse
      type: object
      required:
        - userId
        - username
        - userStatus
        - configStatus
        - firstName
        - secondName
        - fatherLastName
        - motherLastName
        - profileId
        - profileDescription
        - email
        - phoneNumber
        - position
        - documentNumber
        - documentType
        - userIdentity
      properties:
        uuid:
          type: string
          example: "1asdasd-123123"
          description: "ID of user in cache"
        userId:
          type: string
          example: "abascsac-dsadasqweqw-a09423"
          description: "User´s id"
          nullable: false
        username:
          type: string
          example: "jhondoe09"
          description: "User´s username"
          nullable: false
        userStatus:
          type: string
          example: "ENABLED"
          description: "User´s status"
          nullable: false
        configStatus:
          type: string
          example: "COMPLETE"
          description: "User´s configuration status"
          nullable: false
        firstName:
          type: string
          example: "Jhon"
          description: "User´s first name"
          nullable: false
        secondName:
          type: string
          example: "Charles"
          description: "User´s second name"
          nullable: false
        fatherLastName:
          type: string
          example: "Doe"
          description: "User´s father lastname"
          nullable: false
        motherLastName:
          type: string
          example: "Manson"
          description: "User´s mother lastname"
          nullable: false
        profileId:
          type: string
          example: "1230-123"
          description: "User´s profile id"
          nullable: false
        profileDescription:
          type: string
          example: "ADMINISTRATOR"
          description: "User´s profile description"
          nullable: false
        email:
          type: string
          example: "jhondoe@mail.com"
          description: "User´s email"
          nullable: false
        phoneNumber:
          type: string
          example: "0987536984"
          description: "User´s phone number"
          nullable: false
        position:
          type: string
          example: "Sales manager"
          description: "User´s profile ds"
          nullable: false
        documentType:
          type: string
          example: "RUC"
          description: "Document type"
          nullable: false
        documentNumber:
          type: string
          example: "1234567890"
          description: "Document number"
          nullable: false
        userIdentity:
          type: string
          example: "123123-123123"
          description: "Object Id from B2C"
        contractCompanyId:
          type: string
          example: "123123-123"
          description: "Contract comapny id from user"
        lastLogin:
          type: string
          example: "2021-12-02T00:18:51.7495714-05:00"
        company:
          $ref: '#/components/schemas/Company'
        customerUserId:
          type: string
          example: "a990abf4-3617-4454-8d0a-3763ec851b2a"
          description: User Company Contract Uuid
        customerAffiliationId:
          type: string
          example: "b2f01259-a60b-45e8-b5e3-215924834e5"
          description: This code represents the company in a company group.
        userProfileId:
          type: string
          example: "b2f01259-a60b-45e8-b5e3-215924834e5"
          description: Profile template id of the user for the consumption of the banking-product-operations service.
        profileTemplateId:
          title: Profile template Uuid
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"
        userClaims:
          title: Comma delimited user claims
          type: string
          example: "TRPR.CTA.REG,TRPR.CTA.APR"

    Company:
      properties:
        documentNumber:
          type: string
          example: 123123
        documentType:
          type: string
          example: RUC
        cif:
          type: string
          example: c123-123
        name:
          type: string
          example: Company test
        description:
          type: string
          example: Company test

    Error:
      additionalProperties: false
      properties:
        errorCode:
          maxLength: 6
          pattern: "^[a-zA-Z]+$\\d+$"
          type: string
        developerMessage:
          maxLength: 256
          pattern: "^[a-zA-Z\\s]*$"
          type: string
        userMessage:
          maxLength: 256
          pattern: "^[a-zA-Z\\s]*$"
          type: string
        moreInfo:
          maxLength: 256
          pattern: "^[a-zA-Z\\s]*$"
          type: string
        version:
          type: string
          pattern: "^[0-9\\.]*$"
        status:
          type: integer
          default: 409
        code:
          type: string
          pattern: "^[a-zA-Z]+$\\d+$"
      type: object

    VerifyUserResponse:
      type: object
      properties:
        uuid:
          type: string
          example: '12312-123123'
        userClaims:
          title: Comma delimited user claims
          type: string
          example: "TRPR.CTA.REG,TRPR.CTA.APR"

    VerifyUserRequest:
      type: object
      required:
        - userIdReference
        - lang
      properties:
        userIdReference:
          type: string
          description: Object id of B2C
          example: '12312-123123'
        lang:
          type: string
          description: Language from B2C operation
          example: EN


    ProfileResponse:
      title: ProfileResponse
      type: object
      required:
        - firstName
        - secondName
        - fatherLastName
        - motherLastName
        - company

      properties:
        firstName:
          type: string
          example: "Jhon"
          description: "User´s first name"
          nullable: false
        secondName:
          type: string
          example: "Charles"
          description: "User´s second name"
          nullable: false
        fatherLastName:
          type: string
          example: "Doe"
          description: "User´s father lastname"
          nullable: false
        motherLastName:
          type: string
          example: "Manson"
          description: "User´s mother lastname"
          nullable: false
        lastLogin:
          type: string
          example: "2021-12-02T00:18:51.7495714-05:00"

        company:
          $ref: '#/components/schemas/CompanyResponse'
        contactOfficer:
          $ref: '#/components/schemas/ContactOfficerResponse'
    CompanyResponse:
      properties:
        documentNumber:
          type: string
          example: 123123
        documentType:
          type: string
          example: RUC
        name:
          type: string
          example: Company test
    ContactOfficerResponse:
      properties:
        fullname:
          type: string
          example: "Jhon Charles Doe Manson"
        email:
          type: string
          example: "jhondoe@mail.com"
        phoneNumber:
          type: string
          example: "0987536984"

  securitySchemes:
    ApiKeyAuth:
      in: header
      name: x-api-key
      type: apiKey