openapi: 3.0.2
info:
  title: Channel Api Affiliation Ticket
  version: 1.0.0
servers:
- url: https://apim-desarrollo-business-banking.azure-api.net/v1/business-banking/cxp/affiliation/
  description: Developmen
tags:
- name: affiliation
  description: Affiliation Service
paths:
  /v1/business-banking/cxp/affiliation/ticket:
    post:
      tags:
      - affiliation
      operationId: createTicket
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
        required: true
      responses:
        '201':
          description: Ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketOk'
        '400':
          description: Bad request (005, 006, 007)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (003, 004)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found (001, 002)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
  /v1/business-banking/cxp/affiliation/ticket/{id}:
    get:
      tags:
      - affiliation
      operationId: validateOtp
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Company id
      - in: query
        name: otp
        schema:
          type: string
          maxLength: 6
          pattern: ^[0-9]+$
        required: true
        description: OTP code
      responses:
        '200':
          description: Ticket exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketOk'
        '400':
          description: Bad request (008, 009)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
    patch:
      tags:
      - default
      operationId: partialTicketUpdate
      requestBody:
        required: true
        description: To save the user name and password of the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketPatch'
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Ticket to update
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketOk'
        '400':
          description: Bad request (010, 011, 012)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
  /v1/business-banking/cxp/affiliation/ticket/generate:
    post:
      tags:
      - affiliation
      operationId: postTicketGenerate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketGenerateRequest'
        required: true
      responses:
        '201':
          description: Ticket generate
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: string
        '400':
          description: Bad request (005, 006, 007)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (003, 004)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Resource not found (001, 002)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
  /v1/business-banking/cxp/affiliation/affiliate/{id}/get-link-download/{language}:
    get:
      tags:
      - default
      operationId: sendLinkDownload
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Ticket to post
      - in: path
        name: language
        schema:
          type: string
        required: true
        description: Language of sms
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPost'
        '400':
          description: Bad request (010, 011, 012)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
  /v1/business-banking/cxp/affiliation/ticket/{id}/customer:
    post:
      tags:
      - default
      operationId: createCustomer
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Ticket to post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreate'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerPost'
        '400':
          description: Bad request (010, 011, 012)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
  /v1/business-banking/cxp/affiliation/ticket/{id}/terms-conditions/{language}:
    get:
      tags:
      - default
      operationId: getTermsConditions
      parameters:
      - in: header
        name: X-Auth-Token
        schema:
          type: string
        description: Authorization token
        example: Dasd123123asdad1231jbw
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: Ticket for get terms and conditions
      - in: path
        name: language
        schema:
          type: string
        required: true
        description: Language of terms and conditions
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TermConditionResponse'
        '400':
          description: Bad request (010, 011, 012)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
  /v1/business-banking/cxp/affiliation/username/{id}/verification/{language}:
    post:
      tags:
      - default
      operationId: postVerificationUserName
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: UUID de la transacción
      - in: path
        name: language
        schema:
          type: string
        required: true
        description: language of affiliation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostVerificationRequest'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
        '400':
          description: Bad request (010, 011, 012)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: API key is missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
components:
  schemas:
    TermConditionResponse:
      required:
      - url
      - description
      - name
      type: object
      properties:
        url:
          title: url term and conditions
          type: string
          example: http://document.download.com/term-conditions.pdf
        description:
          title: Documento text
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi
            id mi id arcu commodo faucibus. Aenean vel viverra libero, vel auctor
            metus. Proin turpis sapien, sagittis non pharetra vehicula, faucibus eget
            nibh. In at magna a mi facilisis suscipit. Nam hendrerit iaculis risus
            nec auctor. Interdum et malesuada fames ac ante ipsum primis in faucibus.
            Nullam sem neque, euismod sit amet egestas non, tempus non tortor. Nunc
            commodo nisl ac ex commodo, ut ultrices odio maximus. Nunc molestie tempus
            massa convallis ultricies. Nunc vestibulum leo a nisl cursus, eget posuere
            nisl porta. Duis vulputate lacus vel justo accumsan euismod. Donec at
            sapien luctus ipsum finibus tristique ut sed erat. Vestibulum porta, risus
            vitae facilisis dictum, erat dui aliquam tellus, ac pretium diam urna
            ac augue. Praesent facilisis tristique nisl non rutrum. Nulla ante arcu,
            accumsan ac lacus id, congue tincidunt nisl. Morbi ac enim vel lectus
            tincidunt sodales. Maecenas id ipsum pharetra, fermentum justo vitae,
            interdum velit. Quisque non ex leo. Praesent eget facilisis tellus. Sed
            pharetra purus et nibh dictum, sit amet tincidunt nibh feugiat. Pellentesque
            feugiat tristique sapien a ultrices. Suspendisse sed tincidunt ipsum,
            non feugiat velit.
        name:
          title: Document name
          type: string
          example: Term_conditions.pdf
    Ticket:
      type: object
      additionalProperties: false
      required:
      - customerDocument
      - associateDocument
      - lang
      - token
      properties:
        customerDocument:
          type: string
          pattern: ^[0-9]+$
          maxLength: 13
        associateDocument:
          type: string
          pattern: ^[0-9]+$
          maxLength: 10
        token:
          type: string
          description: The captcha information
          nullable: false
        lang:
          type: string
          description: Language according to browser
          nullable: false
    PostVerificationRequest:
      type: object
      required:
      - username
      properties:
        username:
          type: string
        language:
          type: string
    TicketGenerateRequest:
      type: object
      required:
      - language
      - uuid
      properties:
        uuid:
          type: string
        language:
          type: string
    ResponseProperties:
      type: object
      properties:
        uuid:
          type: string
          pattern: ^[0-9]+$
          maxLength: 32
        validateCode:
          type: string
          pattern: ^[0-9]+$
          maxLength: 32
        userName:
          type: string
          pattern: ^[A-Za-z0-9]+$
          maxLength: 32
        userPassword:
          type: string
          pattern: ^[A-Za-z0-9]+$
          maxLength: 32
        userDocType:
          type: string
          pattern: ^[A-Z]+$
          maxLength: 3
          example: DNI
        userDocNumber:
          type: string
          pattern: ^[A-Z]+$
          maxLength: 3
          example: DNI
        customerDocNumber:
          type: string
          pattern: ^[a-zA-z0-9]+$
          maxLength: 32
        idTermsAndConditions:
          type: string
          example: 1
    TicketOk:
      type: object
      properties:
        contactInfo:
          allOf:
          - $ref: '#/components/schemas/ContactInfo'
          - required:
            - email
            - number
      allOf:
      - $ref: '#/components/schemas/ResponseProperties'
      - required:
        - uuid
        - userDocType
        - customerDocNumber
      - additionalProperties: true
    Uuid:
      type: object
      allOf:
      - $ref: '#/components/schemas/ResponseProperties'
      - required:
        - uuid
      - additionalProperties: false
    TicketPatch:
      type: object
      allOf:
      - $ref: '#/components/schemas/ResponseProperties'
      - required:
        - userName
        - userPassword
      - additionalProperties: false
    CustomerPost:
      type: object
      properties:
        has_downloaded_token:
          type: string
    CustomerCreate:
      type: object
      required:
      - password
      properties:
        password:
          type: string
          minLength: 8
          example: Secure#0044
    ContactInfo:
      properties:
        email:
          maxLength: 32
          minLength: 8
          type: string
        phone:
          maxLength: 14
          pattern: ^[0-9]+$
          type: string
        internationalPrefix:
          maxLength: 6
          type: string
    Error:
      type: object
      additionalProperties: false
      properties:
        errorCode:
          type: string
          pattern: ^[a-zA-Z]+$\d+$
          maxLength: 6
        developerMessage:
          type: string
          pattern: ^[a-zA-Z\s]*$
          maxLength: 256
        userMessage:
          type: string
          pattern: ^[a-zA-Z\s]*$
          maxLength: 256
        moreInfo:
          type: string
          pattern: ^[a-zA-Z\s]*$
          maxLength: 256
    GetProfileTemplateByFiltersResponse:
      title: GetProfileTemplateByFiltersResponse
      type: object
      properties:
        profileTemplateId:
          type: string
          example: 1234-5678-90AB-CDEF
        name:
          type: string
          example: Operator
        description:
          type: string
          example: You will have access to create and generate transactions
        registerDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        configParameters:
          type: array
          items:
            $ref: '#/components/schemas/ProfileTemplateParam'
    ProfileTemplateParam:
      title: ProfileTemplateParam
      type: object
      properties:
        name:
          type: string
          example: isEditable
          description: Param code
          x-mapping: profile_parameter.code_parameter
        value:
          type: string
          example: '1'
          description: Param value
          x-mapping: profile_parameter.value
    GetUserByFilterResponse:
      title: GetUserByFilterResponse
      type: object
      required:
      - customerAffiliationId
      properties:
        userId:
          type: string
          description: user id
          example: 01906096-eb18-432b-a9ac-0aa5e80ebe9a
        documentNumber:
          type: string
          description: document of identification user
          example: '171655333001'
        documentType:
          type: string
          description: type of documento
          example: '0001'
        names:
          type: string
          description: Names of user
          example: Name
        surnames:
          type: string
          description: Surnames
          example: Lastname
        position:
          type: string
          description: Surnames
          example: Lastname
        email:
          type: string
          description: Email of user
          example: gobc@email.com
        registerDate:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        channel:
          type: string
          example: Cliente
        cellphone:
          $ref: '#/components/schemas/CellPhone'
        userProfile:
          $ref: '#/components/schemas/Profile'
        status:
          $ref: '#/components/schemas/Status'
    PostUserRequest:
      title: PostUserRequest
      type: object
      properties:
        userId:
          type: string
          example: 1234-5678-90AB-CDEF
        profileTemplateId:
          type: string
          example: 1234-5678-90AB-CDEF
        customerAffiliationId:
          type: string
          example: 1234-5678-90AB-CDEF
        documentNumber:
          type: string
          example: '1721553616'
          maxLength: 10
        documentType:
          type: string
          example: '0001'
          maxLength: 4
        names:
          type: string
          example: Jhon Carlos
        surnames:
          type: string
          example: Steward Colling
        email:
          type: string
          example: jhondoe@mail.com
        position:
          type: string
          example: Manager
        cellphone:
          $ref: '#/components/schemas/CellPhone'
    CellPhone:
      title: CellPhone
      type: object
      properties:
        internationalPrefix:
          type: string
          example: '593'
        number:
          type: string
          example: 0987654321
    Profile:
      title: Profile
      type: object
      required:
      - userProfileId
      properties:
        userProfileId:
          type: string
          description: Code of profile
          example: 01906096-eb18-432b-a9ac-0aa5e80ebe9a
        name:
          type: string
          description: name of profile
          example: Administrator
        description:
          type: string
          description: Description
          example: Allows you to perform operations to add, delete or modify
    Status:
      title: Status
      type: object
      required:
      - code
      properties:
        code:
          type: string
          description: Code of status
          example: STEP-1
        description:
          type: string
          description: description of status
          example: User in step 1
    PostUserResponse:
      title: PostUserResponse
      type: object
      properties:
        userId:
          type: string
          example: 4085b199-5994-4016-ad0c-e28486c59008
    GetAccountByFilterResponse:
      title: GetAccountByFilterResponse
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/GetAccount'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/GetPermission'
    GetAccount:
      title: GetAccount
      type: object
      properties:
        accountId:
          type: string
          example: 2ad8b8fb-f414-4bd7-8733-82b8d8160452
        name:
          type: string
          example: Cuenta ahorros
        alias:
          type: string
          example: PRIN Santo domingo
        type:
          $ref: '#/components/schemas/GetAccountType'
        accountNumber:
          type: string
          example: '2255889965'
    GetAccountType:
      title: GetAccountType
      type: object
      properties:
        code:
          type: string
          example: ''
        description:
          type: string
          example: CTA.CTE PERSONAL
    GetPermission:
      title: GetPermission
      type: object
      properties:
        permissionId:
          type: string
          example: 2ad8b8fb-f414-4bd7-8733-82b8d8160452
        description:
          type: string
          example: persmission descripcion example
        claim:
          type: string
          example: RE.ASD.ED
        isSelected:
          type: boolean
          example: true
    PostBankingProductOperationRequest:
      title: PostBankingProductOperationRequest
      type: object
      properties:
        userId:
          type: string
          example: 2ad8b8fb-f414-4bd7-8733-82b8d8160452
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/PostAccount'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/PostAction'
    PostAccount:
      title: PostAccount
      type: object
      properties:
        accountId:
          type: string
          example: 2ad8b8fb-f414-4bd7-8733-82b8d8160452
    PostAction:
      title: PostAction
      type: object
      properties:
        actionId:
          type: string
          example: 2ad8b8fb-f414-4bd7-8733-82b8d8160452
    GetUserApprovalLevelByFilterResponse:
      title: GetUserApprovalLevelByFilterResponse
      type: object
      properties:
        product:
          $ref: '#/components/schemas/GetProduct'
    GetProduct:
      title: GetProduct
      type: object
      properties:
        productId:
          type: string
          example: 01906096-eb18-432b-a9ac-0aa5e80ebe9a
        name:
          type: string
          example: APR
        description:
          type: string
          example: Aprobar transferencias
        claim:
          type: string
          example: ABC.DEF.GHI
        approvalLevels:
          type: array
          items:
            $ref: '#/components/schemas/GetApprovalLevel'
    GetApprovalLevel:
      title: GetApprovalLevel
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/GetCategory'
        limitsAmount:
          type: array
          items:
            $ref: '#/components/schemas/GetLimitAmount'
    GetCategory:
      title: Category
      type: object
      properties:
        categoryId:
          type: string
          example: 01906096-eb18-432b-a9ac-0aa5e80ebe9a
        name:
          type: string
          example: Name example
        isSelected:
          type: boolean
          example: false
    GetLimitAmount:
      title: GetLimitAmount
      type: object
      properties:
        minAmount:
          type: string
          example: '0'
        maxAmount:
          type: string
          example: '10'
        currency:
          $ref: '#/components/schemas/Currency'
        categories:
          type: array
          items:
            $ref: '#/components/schemas/GetCategoryId'
    Currency:
      type: object
      properties:
        code:
          type: string
          description: Code for currency
          example: USD
    GetCategoryId:
      title: GetCategoryId
      type: object
      properties:
        categoryId:
          type: string
          example: 01906096-eb18-432b-a9ac-0aa5e80ebe9a
    PostUserApprovalLevelRequest:
      title: PostUserApprovalLevelRequest
      type: object
      properties:
        userId:
          type: string
          example: 4085b199-5994-4016-ad0c-e28486c59008
        userProfileId:
          type: string
          example: 4085b199-5994-4016-ad0c-e28486c59008
        userCustomerProduct:
          type: array
          items:
            $ref: '#/components/schemas/PostUserCustomerProduct'
    PostUserCustomerProduct:
      title: PostUserCustomerProduct
      type: object
      properties:
        productId:
          type: string
          example: 1234-5678-90AB-CDEFGH
        approvalLevel:
          $ref: '#/components/schemas/PostApprovalLevel'
    PostApprovalLevel:
      title: PostApprovalLevel
      type: object
      properties:
        categoryId:
          type: string
          example: 1234-5678-90AB-CDEFGH
        isSelected:
          type: boolean
          example: true
    PostUserActivateRequest:
      title: PostUserActivateRequest
      type: object
      properties:
        userId:
          type: string
          example: 1234-5678-90AB-CDEFGH
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    oauth2:
      type: oauth2
      x-amazon-apigateway-authorizer:
        type: jwt
        identitySource: $request.header.Authorization
        jwtConfiguration:
          issuer: ${jwt_issuer}
          audience: ["${jwt_audiences_list}"]
security:
- oauth2: []
x-amazon-apigateway-cors:
  allowOrigins:
  - '*'
  allowHeaders:
  - Authorization
  - Content-Type
  - x-api-key
  - x-language
  - app-name
  - caller-name
  - client-ip
  allowMethods:
  - GET
  - POST
  - OPTIONS
