openapi: 3.0.0
info:
  title: API Channel - Back Office - Employee Access V1
  description: 'Channel API For Employee Access. <br>

    <br>

    <b>• Business Area</b> `Business Support`

    <br>

    <b>• Business Domain</b> `Human Resource Management`

    <br>

    <b>• Service Domain</b> `Employee Access`

    '
  contact:
    name: Carlos Quiroz
    email: cquirozv-ext@pichincha.pe
  version: 1.0.0
servers:
- description: Development
  url: http://localhost:8080/channel/back-office/v1/employee-access
tags:
- name: Employee Access
  description: Employee Access Controller
security:
- oauth2: []
paths:
  /channel/back-office/v1/employee-access/profile:
    get:
      tags:
      - Employee Access
      summary: Returns a list of employee access profile with modules options aviables
      security:
      - ApiKeyAuth: []
      description: "### Details:\n Retrieves the employee access profile.  \n\n###\
        \ Valid use of parameters:\n| Expected result | Path Parameter | Query Parameter\
        \ |\n|--------------------|--------------- |-----------------|\n|Retrieve\
        \ a employee access profile by sending the parameterName | - |  parameterName\
        \ \n\n### The combination described above are the only possible combinations\
        \ of parameters, other combinations will return error.\n\n"
      operationId: GetEmployeeAccessProfileByFilter
      parameters:
      - in: header
        name: authorization
        description: token jwt
        required: true
        schema:
          type: string
      - name: app-name
        in: header
        description: Application Name
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: businessBanking
      - name: caller-name
        in: header
        description: Api name who request
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: bbe-msa-bs-servicing-order
      - name: process-code
        in: header
        description: Identifies the process or functionality
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: BJACAR01
      - name: request-date
        in: header
        description: Request Date | RFC 3339 Format
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: 2019-04-29 07:20:50.520000+00:00
      - name: request-id
        in: header
        description: Request Identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: id of request
        example: 1
      - name: x-device
        in: header
        description: Identifier of the device.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 9939aadd00ee32
      - name: x-device-ip
        in: header
        description: IP address of origin of the request.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: 200.10.89.34
      - name: x-language
        in: header
        description: ISO – 639-1  – Language Code - 2 digit code.
        required: true
        style: simple
        explode: false
        schema:
          maxLength: 5
          type: string
        example: ES
      - name: parameterName
        in: query
        description: parameter Name
        required: false
        style: form
        explode: true
        schema:
          type: string
        example: 079290a2-d576-4d7e-90ca-67620e6c55df
      responses:
        '200':
          description: <b>`Successful search.`</b>
          content:
            application/json;charset=UTF-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetEmployeeAccessProfileByFilterResponse'
              examples:
                GetEmployeeAccessProfileByFilterResponseExample:
                  $ref: '#/components/examples/GetEmployeeAccessProfileByFilterResponseExample'
        '400':
          description: '<b>`Bad Request`</b><br><br>

            The request could not be understood by the server due to malformed syntax.
            The client SHOULD NOT repeat the request without modifications.'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ErrorBadRequest'
        '401':
          description: '<b>`Unauthorized`</b><br><br>

            The request requires user authentication.'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: '<b>`Forbidden`</b><br><br>

            The server understood the request, but is refusing to fulfill it. Authorization
            will not help and the request SHOULD NOT be repeated.'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: '<b>`Not Found`</b><br><br>

            The server has not found anything matching the Request-URI.'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: '<b>`Conflict`</b><br><br>

            The request could not be completed due to a conflict with the current
            state of the resource.'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: '<b>`Too Many Requests`</b><br><br>

            Indicates that the user has sent too many requests in a given amount of
            time ("rate limiting").'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: '<b>`Internal Server Error`</b><br><br>

            The server encountered an unexpected condition which prevented it from
            fulfilling the request.'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Error'
        '504':
          description: '<b>`Gateway Timeout`</b><br><br>

            The server, while acting as a gateway or proxy, did not receive a timely
            response from the upstream server.'
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/Error'
      x-amazon-apigateway-integration:
        payloadFormatVersion: '2.0'
        type: aws_proxy
        httpMethod: POST
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/${lambda_arn_normalize}/invocations
components:
  schemas:
    GetEmployeeAccessProfileByFilterResponse:
      title: GetEmployeeAccessProfileByFilterResponse
      type: object
      properties:
        profileId:
          type: string
          description: Profile id.
          maxLength: 45
        name:
          type: string
          description: Profile name.
          maxLength: 100
        status:
          $ref: '#/components/schemas/Status'
        modules:
          type: array
          items:
            $ref: '#/components/schemas/Module'
    Module:
      title: Module
      type: object
      properties:
        moduleId:
          type: string
          description: Module id.
          maxLength: 45
        name:
          type: string
          description: Module name.
          maxLength: 100
        description:
          type: string
          description: Module description.
          maxLength: 150
        status:
          $ref: '#/components/schemas/Status'
    Status:
      title: Status
      type: object
      properties:
        code:
          type: string
          description: code status
          maxLength: 50
    ErrorBadRequest:
      type: object
      properties:
        title:
          maxLength: 50
          type: string
          description: Technical error message.
          example: Missing mandatory fields.
        detail:
          maxLength: 50
          type: string
          description: Message to display to the client.
          example: The input fields are not correct
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorList'
        instance:
          maxLength: 50
          type: string
          description: Error catalog code.
          example: '022'
        type:
          maxLength: 100
          type: string
          description: Address where the error occurs.
          example: /v1/name/pathSuffix
    ErrorList:
      properties:
        message:
          type: string
          description: Message.
          maxLength: 50
          example: Bad Request
        businessMessage:
          type: string
          description: Business error message.
          maxLength: 50
          example: The xyz field is mandatory
    Error:
      type: object
      properties:
        errorCode:
          maxLength: 6
          pattern: ^[a-zA-Z]+$\d+$
          type: string
          description: Error code.
        developerMessage:
          maxLength: 256
          pattern: ^[a-zA-Z\s]*$
          type: string
          description: Developer message.
        userMessage:
          maxLength: 256
          pattern: ^[a-zA-Z\s]*$
          type: string
          description: User message.
        moreInfo:
          maxLength: 256
          pattern: ^[a-zA-Z\s]*$
          type: string
          description: More info.
      additionalProperties: false
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
    oauth2:
      type: oauth2
      x-amazon-apigateway-authorizer:
        type: jwt
        identitySource: $request.header.Authorization
        jwtConfiguration:
          issuer: ${jwt_issuer}
          audience: ["${jwt_audiences_list}"]
  examples:
    GetEmployeeAccessProfileByFilterResponseExample:
      value:
      - profileId: bd000957-74e8-449b-99f2-0a201f45bc53
        name: bbbo.user.management
        status:
          code: ENABLED
        modules:
        - moduleId: 3ddf5070-26ba-4977-a27e-d6524cf26245
          name: ADM.ORD
          description: Administración de órdenes (opciones Servicios y Usuarios)
          status:
            code: ENABLED
x-amazon-apigateway-cors:
  allowOrigins:
  - '*'
  allowHeaders:
  - Authorization
  - Content-Type
  - x-api-key
  - x-language
  - app-name
  - caller-name
  - client-ip
  allowMethods:
  - GET
  - POST
  - OPTIONS
