openapi: 3.0.0
info:
  title: Api Channel Business Banking User Management
  version: 1.1.0
servers:
  - description: Server in devops in busines banking layer
    url: http://localhost:8080/channel/business-banking/v1/user-management
tags:
  - name: "User"
    description: "User Controller"
  - name: "User Product Permission"
    description: "User Product Permission Controller"
  - name: "User Approval Level"
    description: "User Approval Level Controller"
  - name: "Profile Template"
    description: "Profile Template Controller"
  - name: "Token"
    description: "Token Controller"
security:
  - ApiKeyAuth: []

paths:

  /users/{userId}/update:
    post:
      tags:
        - User
      summary: Update user status
      description: >+
        ### Details:

         Update user status. Can be enable, disable or delete

      operationId: postUserUpdate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: It's the id for user
          example: "0704875963001"

      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PostUserUpdateRequest'
      responses:
        200:
          description: The user was validated successfully.

        409:
          description: The user document and your email are not valid.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      tags:
        - User
      summary: Retrieves a list of users.
      description: >+
        ### Details:

         Retrieves the basic information of the user and the associated profile for company id of JWT.

      operationId: getUser
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
      responses:
        200:
          description: Returns an list of users for company.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUserResponse'
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      tags:
        - User
      summary: Retrieves user detail information
      description: >+
        ### Details:

        Retrieves user detail information by userId.
      operationId: getUserById
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: It's the id for user
          example: "0704875963001"
      responses:
        200:
          description: The User Information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserByIdResponse'
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - User
      summary: Update user basic information.
      description: >+
        ### Details:

        Updates the basic information of the user, for the user modification flow, temporarily using the cache.

      operationId: patchUser
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: It's the id for user
          example: "0704875963001"

      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PatchUserRequest'
      responses:
        200:
          description: The user was successfully updated in cache.

        409:
          description: The user was not successfully updated in cache.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
  /user-product-permissions:
    get:
      tags:
        - User Product Permission
      summary: Retrieves a list of user products permissions.
      description: >+
        ### Details:

        Retrieves a list of user products permissions and accounts of the consolidated position of an user.
      operationId: getUserBankingProductPermission
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: query
          name: userId
          required: true
          schema:
            type: string
            description: User id

      responses:
        200:
          description: Returns the list of accounts and permissions of the consolidated position of an user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserBankingProductPermissionResponse'
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - User Product Permission
      summary: Update user products and actions assigned temporarily in cache.
      description: >+
        ### Details:

          Update the accounts and actions selected by the administrator for the user that is being registered temporarily in cache.
      operationId: putUserProductPermission
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PutUserProductPermissionRequest'
        required: true
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
      responses:
        200:
          description: User accounts and actions was updated succesfully.

        409:
          description: The information are not valid
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: You're not authorized to perform this operation
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
  /user-approval-levels:
    get:
      tags:
        - User Approval Level
      summary: Retrieves a list of categories and approval levels.
      description: >+
        ### Details:
          Retrieves a list of categories and approval levels of the company associated products
      operationId: getUserApprovalLevel
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: query
          name: userId
          required: true
          schema:
            type: string
          example: "236087d9-89d6-47f8-bab3-180aa16b3rty"
          description: Uuid of the user in registration process
      responses:
        200:
          description: Return the data structure to show in the screen
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUserApprovalLevelResponse'
        204:
          description: The user does not have permissions to this section.
        409:
          description: The information are not valid
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: You're not authorized to perform this operation
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - User Approval Level
      summary:  Update the information of the categories and products.
      description: >+
        ### Details:
          Update the information of the categories and products selected to be assigned to the user temporarily in cache.
      operationId: putUserApprovalLevel
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PutUserApprovalLevelRequest'
        required: true
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
      responses:
        200:
          description: User Approval Levels were updated succesfully to the user.
        204:
          description: The user does not have permissions to this section.
        409:
          description: The information are not valid
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: You're not authorized to perform this operation
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available
          content:
            application/json;charset-UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}/profile-templates:
    get:
      tags:
        - Profile Template
      summary: Retrieves the profile template list.
      description: >+
        ### Details:

        Return a list of profile templates defined by the bank for a specific user.

      operationId: getProfileTemplate
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: It's the id for user
          example: "0704875963001"

        - in: query
          name: moreData
          required: false
          schema:
            type: string
          description: For get more data (include other resorces)
          example: actions

      responses:
        200:
          description: Profile template list for a specific user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetProfileTemplateResponse'
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      tags:
        - Profile Template
      summary: Update profile of this user temporarily in cache.
      description: >+
        ### Details:

        Update profile of the user, for the user modification flow, temporarily using the cache.

      operationId: patchUserProfile
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: It's the id for user
          example: "0704875963001"

      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PatchUserProfileRequest'
      responses:
        200:
          description: The user profile was successfully updated in cache.

        409:
          description: The user was not successfully updated in cache.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
  /token/validate:
    post:
      tags:
        - Token
      summary: Validates the received token and updates the user data.
      description: >+
        ### Details:

        Validates that the token generated by the softoken validation process is in the cache, if correct, the data that has been altered during the user maintenance flow in the database is updated.
      operationId: postValidateUser
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: query
          name: userId
          required: true
          schema:
            type: string
          example: "236087d9-89d6-47f8-bab3-180aa16b3rty"
          description: Uuid of the user in registration process
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PostValidateUserRequest'
      responses:
        200:
          description: The user was validated and updated successfully.
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
  /notifications/send:
    post:
      tags:
        - Notification
      summary: Send a notification to user
      description: >+
        ### Details:
          Send a user notification to perform the registration process to B2C
      operationId: postNotificationSend
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
            description: Authorization token
            example: Bearer Dasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbwDasd123123asdad1231jbw
        - in: header
          name: language-code
          schema:
            type: string
          example: "es"
          description: user language
      requestBody:
        content:
          "application/json":
            schema:
              $ref: '#/components/schemas/PostNotificationSendRequest'
      responses:
        200:
          description: Successful notification sending.
        401:
          description: You're not authorized to perform this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: You don't have the right permissions to execute this operation.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error has occurred.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
        502:
          description: The service is not available.
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    GetUserResponse:
      title: GetUserResponse
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          description: user id
          example: "01906096-eb18-432b-a9ac-0aa5e80ebe9a"
        documentNumber:
          type: string
          description: document of identification user
          example: "171655333001"
        documentType:
          type: string
          description: type of documento
          example: "0001"
        names:
          type: string
          description: Names of user
          example: 'Name'
        surnames:
          type: string
          description: Surnames
          example: 'Lastname'
        position:
          type: string
          description: Surnames
          example: 'Lastname'
        status:
          $ref: "#/components/schemas/Status"
        userProfile:
          $ref: "#/components/schemas/Profile"
    GetUserByIdResponse:
      title: GetUserDetailResponse
      type: object
      required:
        - userId
        - names
      properties:
        userId:
          type: string
          description: user id
          example: "01906096-eb18-432b-a9ac-0aa5e80ebe9a"
        documentNumber:
          type: string
          description: document of identification user
          example: "171655333001"
        documentType:
          type: string
          description: type of documento
          example: "0001"
        names:
          type: string
          description: Names of user
          example: 'Name'
        surnames:
          type: string
          description: Surnames
          example: 'Lastname'
        position:
          type: string
          description: Surnames
          example: 'Lastname'
        email:
          type: string
          description: Email of user
          example: "gobc@email.com"
        cellphone:
          $ref: "#/components/schemas/CellPhone"
        userProfile:
          $ref: "#/components/schemas/Profile"
    CellPhone:
      title: Cellphone information
      type: object
      properties:
        internationalPrefix:
          type: string
          example: "593"
          description: "International prefix"
        number:
          type: string
          example: "0987654321"
          description: "Phone number"
    Profile:
      title: Profile
      type: object
      required:
        - userProfileId
      properties:
        userProfileId:
          type: string
          description: Code of profile
          example: "01906096-eb18-432b-a9ac-0aa5e80ebe9a"
        name:
          type: string
          description:  name of profile
          example: Administrator
        description:
          type: string
          description: Description
          example: Allows you to perform operations to add, delete or modify
    Status:
      title: Status
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: Code of status
          example: "STEP-1"
        description:
          type: string
          description: description of status
          example: "User in step 1"
    GetUserBankingProductPermissionResponse:
      title: GetUserBankingProductPermissionResponse
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: "#/components/schemas/Account"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
    Action:
      type: object
      properties:
        actionId:
          type: string
          example: "2ad8b8fb-f414-4bd7-8733-82b8d8160444"
          description: "Action´s id"
          x-mapping: "action_uuid"
        name:
          type: string
          example: "APR"
          description: "Action´s name"
          x-mapping: "name"
        description:
          type: string
          example: "Aprobar las transferencias"
          description: "Action´s description"
          x-mapping: "description"
        isSelected:
          type: boolean
          example: true
          description: "Action is selected for this user"
    Account:
      type: object
      properties:
        accountId:
          type: string
          example: "2ad8b8fb-f414-4bd7-8733-82b8d8160452"
          description: "Uuid of account number"
        name:
          type: string
          example: "Cuenta ahorros"
          description: "Product´s name"
        alias:
          type: string
          example: "PRIN Santo domingo"
          description: "Alias of account"
        type:
          $ref: '#/components/schemas/AccountType'
        accountNumber:
          type: string
          example: "2255889965"
          description: "Account number"
          x-mapping: "name"
        isSelected:
          type: boolean
          example: true
          description: "Account is selected for this user"
    AccountType:
      type: object
      description: Tipo de producto.
      properties:
        code:
          type: string
          example: ""
        description:
          type: string
          example: CTA.CTE PERSONAL
    GetUserApprovalLevelResponse:
      title: GetUserApprovalLevelResponse
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
    Product:
      type: object
      properties:
        productId:
          type: string
          example: "01906096-eb18-432b-a9ac-0aa5e80ebe9a"
        name:
          type: string
          example: "APR"
        description:
          type: string
          example: "Aprobar transferencias"
        isSelected:
          type: boolean
          example: true
          description: "Product is selected for this user"
        claim:
          $ref: "#/components/schemas/Claim"
        approvalLevels:
          type: array
          items:
            $ref: "#/components/schemas/ApprovalLevel"
    ApprovalLevel:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
        limitsAmount:
          type: array
          items:
            $ref: "#/components/schemas/LimitAmount"
    Category:
      title: Category
      type: object
      properties:
        categoryId:
          type: string
          example: "01906096-eb18-432b-a9ac-0aa5e80ebe9a"
        name:
          type: string
          example: "Name example"
        isSelected:
          type: boolean
          example: false
    LimitAmount:
      title: Level
      type: object
      properties:
        minAmount:
          type: string
          example: "0"
        maxAmount:
          type: string
          example: "10"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryId"
    CategoryId:
      title: CategoryId
      type: object
      properties:
        categoryId:
          type: string
          example: "01906096-eb18-432b-a9ac-0aa5e80ebe9a"
    Claim:
      title: Claim
      type: object
      properties:
        service:
          type: string
          example: ""
        product:
          type: string
          example: "CTA"
        action:
          type: string
          example: ""
    PostUserUpdateRequest:
      title: PostUserUpdateRequest
      type: object
      properties:
        tokenAuthenticationId:
          title: tokenAuthenticationId
          type: string
          example: "25850f86-24d7-4db6-8fd1-29e865112b02"
          nullable: false
        startStatusDate:
          type: string
          example: 2017-07-21
        endStatusDate:
          type: string
          example: 2017-08-21
        description:
          type: string
          example: "Vacations"
          description: "Reason for change status"
        status:
          $ref: "#/components/schemas/UserStatus"
    UserStatus:
      title: UserStatus
      type: object
      required:
        - code
      properties:
        code:
          type: string
          example: "ENABLE | DISABLE | DELETE"
          description: "Product´s status code"
          x-mapping: "status"
    PatchUserRequest:
      title: PatchUserRegisterRequest
      type: object
      properties:
        email:
          title: "Email"
          type: string
          example: "jhondoe@mail.com"
        position:
          type: string
          example: "Manager"
          description: "Employment relationship."
        cellphone:
          $ref: "#/components/schemas/CellPhone"
    PatchUserProfileRequest:
      title: PatchUserProfileRequest
      type: object
      properties:
        profileTemplateId:
          type: string
          example: "5e20adb4-f1b9-454c-8670-08bc8d2acc3e"
          description: "Profile´s uuid"
          x-mapping: "profile_template_identity"
    GetProfileTemplateResponse:
      title: GetProfileResponse
      type: object
      properties:
        profileTemplateId:
          type: string
          example: "5e20adb4-f1b9-454c-8670-08bc8d2acc3e"
          description: "Profile´s uuid"
          x-mapping: "profile_template_identity"
        name:
          type: string
          example: "Perfil Operador"
          description: "Profile´s name"
          x-mapping: "name"
        description:
          type: string
          example: "Tendrá acceso a crear y generar transacciones"
          description: "Profile´s description"
          x-mapping: "description"
        status:
          type: object
          $ref: "#/components/schemas/GetProfileTemplateResponseStatus"
        registerDate:
          type: string
          format: date-time
          example: "2017-07-21T17:32:28Z"
          description: "Profile´s creation date"
          x-mapping: "creation_date"
        isEditable:
          type: boolean
          example: true
          description: "Profile is editable"
          x-mapping: "editable"
        isSelected:
          type: boolean
          example: true
          description: "Profile is selected for this user"
        configParameters:
          type: array
          items:
            $ref: "#/components/schemas/GetProfileTemplateResponseParam"
    GetProfileTemplateResponseStatus:
      title: GetProfileResponseStatus
      type: object
      properties:
        code:
          type: string
          example: "ENABLED"
          description: "Profile´s status code"
          x-mapping: "status"
    GetProfileTemplateResponseParam:
      title: GetProfileTemplateResponseParam
      type: object
      properties:
        name:
          type: string
          example: "PROFILE_IS_COMBINED"
          description: "Param code"
          x-mapping: "profile_parameter.code_parameter"
        value:
          type: string
          example: "0"
          description: "Param value"
          x-mapping: "profile_parameter.value"
    PostValidateUserRequest:
      title: PostValidateUserRequest
      type: object
      properties:
        tokenAuthenticationId:
          title: tokenAuthenticationId
          type: string
          example: "25850f86-24d7-4db6-8fd1-29e865112b02"
          nullable: false
    Error:
      type: object
      additionalProperties: false
      properties:
        errorCode:
          type: string
          pattern: ^[a-zA-Z]+$\d+$
          maxLength: 6
        developerMessage:
          type: string
          pattern: ^[a-zA-Z\s]*$
          maxLength: 256
        userMessage:
          type: string
          pattern: ^[a-zA-Z\s]*$
          maxLength: 256
        moreInfo:
          type: string
          pattern: ^[a-zA-Z\s]*$
          maxLength: 256
        version:
          maxLength: 256
          pattern: "^[a-zA-Z\\s]*$"
          type: string
          example: "1.0.0"
        status:
          maxLength: 15
          type: integer
          example: 409
    PutUserProductPermissionRequest:
      title: PatchUserProductPermissionRequest
      type: object
      properties:
        userId:
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"
          description: "Uuid user"
        coreProducts:
          type: array
          items:
            $ref: "#/components/schemas/PutCoreProduct"
          description: "List of accounts Uuids to assign to the user"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/PutAction"
          description: "List of actions Uuids to assign to the user"
    PutCoreProduct:
      type: object
      description: Core product Uuid
      properties:
        coreProductId:
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"
    PutAction:
      type: object
      description: Action Uuid
      properties:
        actionId:
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"
    PutUserApprovalLevelRequest:
      title: PostUserApprovalLevelRequest
      type: object
      properties:
        userId:
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"
        userCustomerProduct:
          type: array
          items:
            $ref: "#/components/schemas/UserCustomerProduct"
    UserCustomerProduct:
      title: UserPermissionCustomerProduct
      type: object
      properties:
        productId:
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"
        approvalLevels:
          type: object
          $ref: "#/components/schemas/UserPermissionCustomerProduct"

    UserPermissionCustomerProduct:
      title: UserPermissionCustomerProduct
      type: object
      properties:
        categoryId:
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"
        isSelected:
          type: boolean
          example: true

    PostNotificationSendRequest:
      type: object
      properties:
        customerUserId:
          type: string
          example: "4085b199-5994-4016-ad0c-e28486c59008"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key